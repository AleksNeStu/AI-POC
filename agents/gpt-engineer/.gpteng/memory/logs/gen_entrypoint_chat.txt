
2024-10-05T14:02:39.338513
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: requirements.txt
1 flask
2 flask-socketio
3 eventlet

File: src/app.py
1 from flask import Flask, render_template
2 from flask_socketio import SocketIO
3 from src.controller.game_controller import GameController
4 
5 app = Flask(__name__)
6 socketio = SocketIO(app, async_mode='eventlet')
7 
8 game_controller = GameController(socketio)
9 
10 @app.route('/')
11 def index():
12     return render_template('index.html')
13 
14 if __name__ == '__main__':
15     socketio.run(app, host='0.0.0.0', port=5000)

File: src/controller/game_controller.py
1 from src.model.game_state import GameState
2 from src.websocket_handler import WebSocketHandler
3 
4 class GameController:
5     def __init__(self, socketio):
6         self.game_state = GameState()
7         self.websocket_handler = WebSocketHandler(socketio, self.game_state)
8         self.websocket_handler.start_game_loop()
9 
10     def update_game(self):
11         # Logic to update the game state
12         self.game_state.update()
13         self.websocket_handler.broadcast_state()

File: src/model/game_state.py
1 from dataclasses import dataclass, field
2 from typing import List
3 from src.model.snake import Snake
4 
5 @dataclass
6 class GameState:
7     snakes: List[Snake] = field(default_factory=list)
8     food_position: tuple = (0, 0)
9 
10     def update(self):
11         # Update the game state, move snakes, check collisions, etc.
12         for snake in self.snakes:
13             snake.move()
14         # Additional logic to handle food and collisions

File: src/model/snake.py
1 from dataclasses import dataclass, field
2 from typing import List, Tuple
3 
4 @dataclass
5 class Snake:
6     body: List[Tuple[int, int]] = field(default_factory=list)
7     direction: Tuple[int, int] = (0, 1)
8 
9     def move(self):
10         # Logic to move the snake in the current direction
11         new_head = (self.body[0][0] + self.direction[0], self.body[0][1] + self.direction[1])
12         self.body = [new_head] + self.body[:-1]

File: src/websocket_handler.py
1 from flask_socketio import SocketIO
2 from src.model.game_state import GameState
3 
4 class WebSocketHandler:
5     def __init__(self, socketio: SocketIO, game_state: GameState):
6         self.socketio = socketio
7         self.game_state = game_state
8 
9     def start_game_loop(self):
10         # Start the game loop to update and broadcast the game state
11         self.socketio.start_background_task(self.game_loop)
12 
13     def game_loop(self):
14         while True:
15             self.game_state.update()
16             self.broadcast_state()
17             self.socketio.sleep(0.1)  # Adjust the sleep time for game speed
18 
19     def broadcast_state(self):
20         # Broadcast the current game state to all connected clients
21         self.socketio.emit('game_state', self.game_state)

File: templates/index.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Multiplayer Snake Game</title>
7     <style>
8         /* Basic styling for the game canvas */
9         #gameCanvas {
10             border: 1px solid black;
11         }
12     </style>
13 </head>
14 <body>
15     <canvas id="gameCanvas" width="800" height="600"></canvas>
16     <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js"></script>
17     <script>
18         const socket = io();
19 
20         const canvas = document.getElementById('gameCanvas');
21         const context = canvas.getContext('2d');
22 
23         socket.on('game_state', (gameState) => {
24             // Clear the canvas
25             context.clearRect(0, 0, canvas.width, canvas.height);
26 
27             // Draw each snake
28             gameState.snakes.forEach(snake => {
29                 context.fillStyle = 'green';
30                 snake.body.forEach(segment => {
31                     context.fillRect(segment[0] * 10, segment[1] * 10, 10, 10);
32                 });
33             });
34 
35             // Draw the food
36             context.fillStyle = 'red';
37             context.fillRect(gameState.food_position[0] * 10, gameState.food_position[1] * 10, 10, 10);
38         });
39 
40         document.addEventListener('keydown', (event) => {
41             let direction;
42             switch (event.key) {
43                 case 'ArrowUp':
44                     direction = { x: 0, y: -1 };
45                     break;
46                 case 'ArrowDown':
47                     direction = { x: 0, y: 1 };
48                     break;
49                 case 'ArrowLeft':
50                     direction = { x: -1, y: 0 };
51                     break;
52                 case 'ArrowRight':
53                     direction = { x: 1, y: 0 };
54                     break;
55             }
56             if (direction) {
57                 socket.emit('change_direction', direction);
58             }
59         });
60     </script>
61 </body>
62 </html>

```

================================== Ai Message ==================================

```bash
#!/bin/bash

# Install dependencies
pip install -r requirements.txt

# Run the application
python src/app.py
```
